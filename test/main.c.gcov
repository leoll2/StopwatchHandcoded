        -:    0:Source:src/main.c
        -:    0:Graph:.\build\main.gcno
        -:    0:Data:.\build\main.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "CUnit/Basic.h"
        -:    2:#include "CUnit/Console.h"
        -:    3:#include "CUnit/Automated.h"
        -:    4:
        -:    5:#include "event.h"
        -:    6:#include "swatch.h"
        -:    7:
        -:    8:static CU_pSuite pSuite = NULL;
        -:    9:
        -:   10:
        -:   11:/* ########################################################################
        -:   12: * SUITE 'EVENTS':
        -:   13: * Test events. Ensure that set and reset commands are working properly
        -:   14: * ######################################################################## */
        -:   15:
        2:   16:int init_suite_events(void)
        -:   17:{
        2:   18:	return 0;
        -:   19:}
        -:   20:
        2:   21:int clean_suite_events(void)
        -:   22:{
        2:   23:	return 0;
        -:   24:}
        -:   25:
        -:   26:/* Test ClearEvents function.
        -:   27: * Note: no guarantee yet that SetEvent() and IsEvent are working properly,
        -:   28: * so these need to be validated in a future tests. */
        2:   29:void test_clear_events(void)
        -:   30:{
        2:   31:	ClearEvents();
        -:   32:
        2:   33:	CU_ASSERT(!IsEvent(TIMEMODE_EV));
        2:   34:	CU_ASSERT(!IsEvent(TIMESETMODE_EV));
        2:   35:	CU_ASSERT(!IsEvent(ALARMMODE_EV));
        2:   36:	CU_ASSERT(!IsEvent(SWATCHMODE_EV));
        2:   37:	CU_ASSERT(!IsEvent(PLUS_EV));
        2:   38:	CU_ASSERT(!IsEvent(MINUS_EV));
        -:   39:
        2:   40:	SetEvent(TIMEMODE_EV);
        2:   41:	SetEvent(TIMESETMODE_EV);
        2:   42:	SetEvent(ALARMMODE_EV);
        2:   43:	SetEvent(SWATCHMODE_EV);
        2:   44:	SetEvent(PLUS_EV);
        2:   45:	SetEvent(MINUS_EV);
        -:   46:
        2:   47:	ClearEvents();
        -:   48:
        2:   49:	CU_ASSERT(!IsEvent(TIMEMODE_EV));
        2:   50:	CU_ASSERT(!IsEvent(TIMESETMODE_EV));
        2:   51:	CU_ASSERT(!IsEvent(ALARMMODE_EV));
        2:   52:	CU_ASSERT(!IsEvent(SWATCHMODE_EV));
        2:   53:	CU_ASSERT(!IsEvent(PLUS_EV));
        2:   54:	CU_ASSERT(!IsEvent(MINUS_EV));
        2:   55:}
        -:   56:
        -:   57:/* Test SetEvent and IsEvent functions.
        -:   58: * Note: no guarantee yet that IsEvent is working properly. */
        2:   59:void test_set_event(void)
        -:   60:{
        2:   61:	ClearEvents();
        2:   62:	SetEvent(TIMEMODE_EV);
        2:   63:	CU_ASSERT(IsEvent(TIMEMODE_EV));
        2:   64:	CU_ASSERT(!IsEvent(TIMESETMODE_EV));
        2:   65:	CU_ASSERT(!IsEvent(ALARMMODE_EV));
        2:   66:	CU_ASSERT(!IsEvent(SWATCHMODE_EV));
        2:   67:	CU_ASSERT(!IsEvent(PLUS_EV));
        2:   68:	CU_ASSERT(!IsEvent(MINUS_EV));
        2:   69:	ClearEvents();
        -:   70:
        2:   71:	ClearEvents();
        2:   72:	SetEvent(TIMESETMODE_EV);
        2:   73:	CU_ASSERT(!IsEvent(TIMEMODE_EV));
        2:   74:	CU_ASSERT(IsEvent(TIMESETMODE_EV));
        2:   75:	CU_ASSERT(!IsEvent(ALARMMODE_EV));
        2:   76:	CU_ASSERT(!IsEvent(SWATCHMODE_EV));
        2:   77:	CU_ASSERT(!IsEvent(PLUS_EV));
        2:   78:	CU_ASSERT(!IsEvent(MINUS_EV));
        2:   79:	ClearEvents();
        -:   80:
        2:   81:	ClearEvents();
        2:   82:	SetEvent(ALARMMODE_EV);
        2:   83:	CU_ASSERT(!IsEvent(TIMEMODE_EV));
        2:   84:	CU_ASSERT(!IsEvent(TIMESETMODE_EV));
        2:   85:	CU_ASSERT(IsEvent(ALARMMODE_EV));
        2:   86:	CU_ASSERT(!IsEvent(SWATCHMODE_EV));
        2:   87:	CU_ASSERT(!IsEvent(PLUS_EV));
        2:   88:	CU_ASSERT(!IsEvent(MINUS_EV));
        2:   89:	ClearEvents();
        -:   90:
        2:   91:	ClearEvents();
        2:   92:	SetEvent(SWATCHMODE_EV);
        2:   93:	CU_ASSERT(!IsEvent(TIMEMODE_EV));
        2:   94:	CU_ASSERT(!IsEvent(TIMESETMODE_EV));
        2:   95:	CU_ASSERT(!IsEvent(ALARMMODE_EV));
        2:   96:	CU_ASSERT(IsEvent(SWATCHMODE_EV));
        2:   97:	CU_ASSERT(!IsEvent(PLUS_EV));
        2:   98:	CU_ASSERT(!IsEvent(MINUS_EV));
        2:   99:	ClearEvents();
        -:  100:
        2:  101:	ClearEvents();
        2:  102:	SetEvent(PLUS_EV);
        2:  103:	CU_ASSERT(!IsEvent(TIMEMODE_EV));
        2:  104:	CU_ASSERT(!IsEvent(TIMESETMODE_EV));
        2:  105:	CU_ASSERT(!IsEvent(ALARMMODE_EV));
        2:  106:	CU_ASSERT(!IsEvent(SWATCHMODE_EV));
        2:  107:	CU_ASSERT(IsEvent(PLUS_EV));
        2:  108:	CU_ASSERT(!IsEvent(MINUS_EV));
        2:  109:	ClearEvents();
        -:  110:
        2:  111:	ClearEvents();
        2:  112:	SetEvent(MINUS_EV);
        2:  113:	CU_ASSERT(!IsEvent(TIMEMODE_EV));
        2:  114:	CU_ASSERT(!IsEvent(TIMESETMODE_EV));
        2:  115:	CU_ASSERT(!IsEvent(ALARMMODE_EV));
        2:  116:	CU_ASSERT(!IsEvent(SWATCHMODE_EV));
        2:  117:	CU_ASSERT(!IsEvent(PLUS_EV));
        2:  118:	CU_ASSERT(IsEvent(MINUS_EV));
        2:  119:	ClearEvents();
        2:  120:}
        -:  121:
        -:  122:/* Test ClearEvent function. This implicitly tests IsEvent too. */
        2:  123:void test_clear_event(void)
        -:  124:{
        2:  125:	ClearEvents();
        -:  126:
        2:  127:	SetEvent(TIMEMODE_EV);
        2:  128:	ClearEvent(TIMEMODE_EV);
        2:  129:	CU_ASSERT(!IsEvent(TIMEMODE_EV));
        -:  130:
        2:  131:	SetEvent(TIMESETMODE_EV);
        2:  132:	ClearEvent(TIMESETMODE_EV);
        2:  133:	CU_ASSERT(!IsEvent(TIMESETMODE_EV));
        -:  134:
        2:  135:	SetEvent(ALARMMODE_EV);
        2:  136:	ClearEvent(ALARMMODE_EV);
        2:  137:	CU_ASSERT(!IsEvent(ALARMMODE_EV));
        -:  138:
        2:  139:	SetEvent(SWATCHMODE_EV);
        2:  140:	ClearEvent(SWATCHMODE_EV);
        2:  141:	CU_ASSERT(!IsEvent(SWATCHMODE_EV));
        -:  142:
        2:  143:	SetEvent(PLUS_EV);
        2:  144:	ClearEvent(PLUS_EV);
        2:  145:	CU_ASSERT(!IsEvent(PLUS_EV));
        -:  146:
        2:  147:	SetEvent(MINUS_EV);
        2:  148:	ClearEvent(MINUS_EV);
        2:  149:	CU_ASSERT(!IsEvent(MINUS_EV));
        2:  150:}
        -:  151:
        -:  152:
        -:  153:/* ########################################################################
        -:  154: * SUITE 'MODES':
        -:  155: * Test modes. Ensure that switching between modes works properly when the
        -:  156: * corresponding event is generated.
        -:  157: * ######################################################################## */
        -:  158:
        2:  159:int init_suite_modes(void)
        -:  160:{
        2:  161:	return 0;
        -:  162:}
        -:  163:
        2:  164:int clean_suite_modes(void)
        -:  165:{
        2:  166:	return 0;
        -:  167:}
        -:  168:
        -:  169:/* Transition Tour between the 4 modes. Here below the sequence of nodes (abbreviated)
        -:  170: * T -> TS -> A -> SW -> TS -> T -> A -> TS -> SW -> T -> SW -> A */
        2:  171:void test_mode_transitions(void)
        -:  172:{
        2:  173:	SetEvent(TIMEMODE_EV);
        2:  174:	TaskInterface();
        2:  175:	CU_ASSERT_EQUAL(mode, TIMEMODE);
        -:  176:
        2:  177:	SetEvent(TIMESETMODE_EV);
        2:  178:	TaskInterface();
        2:  179:	CU_ASSERT_EQUAL(mode, TIMESETMODE);
        -:  180:
        2:  181:	SetEvent(ALARMMODE_EV);
        2:  182:	TaskInterface();
        2:  183:	CU_ASSERT_EQUAL(mode, ALARMMODE);
        -:  184:
        2:  185:	SetEvent(SWATCHMODE_EV);
        2:  186:	TaskInterface();
        2:  187:	CU_ASSERT_EQUAL(mode, SWATCHMODE);
        -:  188:
        2:  189:	SetEvent(TIMESETMODE_EV);
        2:  190:	TaskInterface();
        2:  191:	CU_ASSERT_EQUAL(mode, TIMESETMODE);
        -:  192:
        2:  193:	SetEvent(TIMEMODE_EV);
        2:  194:	TaskInterface();
        2:  195:	CU_ASSERT_EQUAL(mode, TIMEMODE);
        -:  196:
        2:  197:	SetEvent(ALARMMODE_EV);
        2:  198:	TaskInterface();
        2:  199:	CU_ASSERT_EQUAL(mode, ALARMMODE);
        -:  200:
        2:  201:	SetEvent(TIMESETMODE_EV);
        2:  202:	TaskInterface();
        2:  203:	CU_ASSERT_EQUAL(mode, TIMESETMODE);
        -:  204:
        2:  205:	SetEvent(SWATCHMODE_EV);
        2:  206:	TaskInterface();
        2:  207:	CU_ASSERT_EQUAL(mode, SWATCHMODE);
        -:  208:
        2:  209:	SetEvent(TIMEMODE_EV);
        2:  210:	TaskInterface();
        2:  211:	CU_ASSERT_EQUAL(mode, TIMEMODE);
        -:  212:
        2:  213:	SetEvent(SWATCHMODE_EV);
        2:  214:	TaskInterface();
        2:  215:	CU_ASSERT_EQUAL(mode, SWATCHMODE);
        -:  216:
        2:  217:	SetEvent(ALARMMODE_EV);
        2:  218:	TaskInterface();
        2:  219:	CU_ASSERT_EQUAL(mode, ALARMMODE);
        2:  220:}
        -:  221:
        -:  222:/* Test TimesetMode sub-modes. */
        2:  223:void test_timeset_modes(void)
        -:  224:{
        2:  225:	SetEvent(TIMESETMODE_EV);
        2:  226:	TaskInterface();
        2:  227:	CU_ASSERT((tsmode == SETHOURS) || (tsmode == SETMINUTES));
        2:  228:	Mode pmode = tsmode;
        -:  229:
        2:  230:	SetEvent(TIMESETMODE_EV);
        2:  231:	TaskInterface();
        2:  232:	CU_ASSERT_EQUAL(mode, TIMESETMODE);
        2:  233:	CU_ASSERT((tsmode == SETHOURS) || (tsmode == SETMINUTES));
        2:  234:	CU_ASSERT_NOT_EQUAL(tsmode, pmode);
        2:  235:	pmode = tsmode;
        -:  236:
        2:  237:	SetEvent(TIMESETMODE_EV);
        2:  238:	TaskInterface();
        2:  239:	CU_ASSERT_EQUAL(mode, TIMESETMODE);
        2:  240:	CU_ASSERT((tsmode == SETHOURS) || (tsmode == SETMINUTES));
        2:  241:	CU_ASSERT_NOT_EQUAL(tsmode, pmode);
        2:  242:}
        -:  243:
        -:  244:/* Test AlarmMode sub-modes. */
        2:  245:void test_alarm_modes(void)
        -:  246:{
        2:  247:	SetEvent(ALARMMODE_EV);
        2:  248:	TaskInterface();
        2:  249:	CU_ASSERT((asmode == ASETHOURS) || (asmode == ASETMINUTES));
        2:  250:	Mode pmode = asmode;
        -:  251:
        2:  252:	SetEvent(ALARMMODE_EV);
        2:  253:	TaskInterface();
        2:  254:	CU_ASSERT_EQUAL(mode, ALARMMODE);
        2:  255:	CU_ASSERT((asmode == ASETHOURS) || (asmode == ASETMINUTES));
        2:  256:	CU_ASSERT_NOT_EQUAL(asmode, pmode);
        2:  257:	pmode = asmode;
        -:  258:
        2:  259:	SetEvent(ALARMMODE_EV);
        2:  260:	TaskInterface();
        2:  261:	CU_ASSERT_EQUAL(mode, ALARMMODE);
        2:  262:	CU_ASSERT((asmode == ASETHOURS) || (asmode == ASETMINUTES));
        2:  263:	CU_ASSERT_NOT_EQUAL(asmode, pmode);
        2:  264:}
        -:  265:
        -:  266:
        -:  267:/* ########################################################################
        -:  268: * SUITE 'CLOCK':
        -:  269: * Make sure clock is counting the right time
        -:  270: * ######################################################################## */
        -:  271:
       14:  272:void reset_time()
        -:  273:{
       14:  274:	tenths = seconds = minutes = hours = 0;
       14:  275:}
        -:  276:
       28:  277:bool is_equal_time(uint8_t h, uint8_t m, uint8_t s, uint8_t t)
        -:  278:{
       28:  279:	return (h == hours && m == minutes && s == seconds && t == tenths);
        -:  280:}
        -:  281:
        2:  282:int init_suite_clock(void)
        -:  283:{
        2:  284:	reset_time();
        2:  285:	return 0;
        -:  286:}
        -:  287:
        2:  288:int clean_suite_clock(void)
        -:  289:{
        2:  290:	return 0;
        -:  291:}
        -:  292:
        -:  293:/* Test main clock. */
        2:  294:void test_main_clock(void)
        -:  295:{
        2:  296:	unsigned i = 0;
        -:  297:
        2:  298:	CU_ASSERT(is_equal_time(0, 0, 0, 0));	// test reset
        2:  299:	TaskClock();
        2:  300:	CU_ASSERT(is_equal_time(0, 0, 0, 1));   // test tenths
        2:  301:	TaskClock();
        2:  302:	CU_ASSERT(is_equal_time(0, 0, 0, 2));
        -:  303:
        2:  304:	reset_time();
       20:  305:	for (i = 0; i < 9; ++i)
       18:  306:		TaskClock();
        2:  307:	CU_ASSERT(is_equal_time(0, 0, 0, 9)); 	// test tenths
        2:  308:	TaskClock();
        2:  309:	CU_ASSERT(is_equal_time(0, 0, 1, 0));	// test tenths wrap
        -:  310:
        2:  311:	reset_time();
       82:  312:	for (i = 0; i < 40; ++i) 				// 4 seconds
       80:  313:		TaskClock();
        2:  314:	CU_ASSERT(is_equal_time(0, 0, 4, 0));	// test seconds
     1120:  315:	for (i = 0; i < 559; ++i) 				// 55.9 seconds more
     1118:  316:		TaskClock();
        2:  317:	CU_ASSERT(is_equal_time(0, 0, 59, 9));	// test seconds
        2:  318:	TaskClock();							// 0.1 seconds more
        2:  319:	CU_ASSERT(is_equal_time(0, 1, 0, 0));	// test seconds wrap
        -:  320:
        2:  321:	reset_time();
     4802:  322:	for (i = 0; i < 4*600; ++i)				// 4 minutes
     4800:  323:		TaskClock();
        2:  324:	CU_ASSERT(is_equal_time(0, 4, 0, 0));	// test minutes
    67200:  325:	for (i = 0; i < (56*600-1); ++i) 		// 55 minutes, 59 seconds and 9 tenths more
    67198:  326:		TaskClock();
        2:  327:	CU_ASSERT(is_equal_time(0, 59, 59, 9));	// test minutes
        2:  328:	TaskClock();
        2:  329:	CU_ASSERT(is_equal_time(1, 0, 0, 0));	// test minutes wrap
        -:  330:
        2:  331:	reset_time();
   288002:  332:	for (i = 0; i < 4*60*600; ++i)			// 4 hours
   288000:  333:		TaskClock();
        2:  334:	CU_ASSERT(is_equal_time(4, 0, 0, 0));	// test hours
  1440000:  335:	for (i = 0; i < (20*60*600-1); ++i) 	// 20 hours, 59 minutes, 59 seconds and 9 tenths more
  1439998:  336:		TaskClock();
        2:  337:	CU_ASSERT(is_equal_time(23, 59, 59, 9));// test hours
        2:  338:	TaskClock();
        2:  339:	CU_ASSERT(is_equal_time(0, 0, 0, 0));	// test hours wrap
        2:  340:}
        -:  341:
        -:  342:
        -:  343:
        -:  344:/* ########################################################################
        -:  345: * SUITE 'STOPWATCH':
        -:  346: * Make sure stopwatch clock is counting the right time
        -:  347: * ######################################################################## */
        -:  348:
       10:  349:void reset_swtime()
        -:  350:{
       10:  351:	s_tenths = s_seconds = s_minutes = 0;
       10:  352:}
        -:  353:
       26:  354:bool is_equal_swtime(uint8_t m, uint8_t s, uint8_t t)
        -:  355:{
       26:  356:	return (m == s_minutes && s == s_seconds && t == s_tenths);
        -:  357:}
        -:  358:
        2:  359:int init_suite_swatch(void)
        -:  360:{
        2:  361:	reset_swtime();
        2:  362:	return 0;
        -:  363:}
        -:  364:
        2:  365:int clean_suite_swatch(void)
        -:  366:{
        2:  367:	return 0;
        -:  368:}
        -:  369:
        -:  370:/* Test stopwatch clock. */
        2:  371:void test_swatch_clock(void)
        -:  372:{
        2:  373:	unsigned i = 0;
        -:  374:
        2:  375:	CU_ASSERT(is_equal_swtime(0, 0, 0));	// test reset
        2:  376:	TaskStopwatch();
        2:  377:	CU_ASSERT(is_equal_swtime(0, 0, 1));    // test tenths
        2:  378:	TaskStopwatch();
        2:  379:	CU_ASSERT(is_equal_swtime(0, 0, 2));
        -:  380:
        2:  381:	reset_swtime();
       20:  382:	for (i = 0; i < 9; ++i)
       18:  383:		TaskStopwatch();
        2:  384:	CU_ASSERT(is_equal_swtime(0, 0, 9)); 	// test tenths
        2:  385:	TaskStopwatch();
        2:  386:	CU_ASSERT(is_equal_swtime(0, 1, 0));	// test tenths wrap
        -:  387:
        2:  388:	reset_swtime();
       82:  389:	for (i = 0; i < 40; ++i) 				// 4 seconds
       80:  390:		TaskStopwatch();
        2:  391:	CU_ASSERT(is_equal_swtime(0, 4, 0));	// test seconds
     1120:  392:	for (i = 0; i < 559; ++i) 				// 55.9 seconds more
     1118:  393:		TaskStopwatch();
        2:  394:	CU_ASSERT(is_equal_swtime(0, 59, 9));	// test seconds
        2:  395:	TaskStopwatch();						// 0.1 seconds more
        2:  396:	CU_ASSERT(is_equal_swtime(1, 0, 0));	// test seconds wrap
        -:  397:
        2:  398:	reset_swtime();
     4802:  399:	for (i = 0; i < 4*600; ++i)				// 4 minutes
     4800:  400:		TaskStopwatch();
        2:  401:	CU_ASSERT(is_equal_swtime(4, 0, 0));	// test minutes
    67200:  402:	for (i = 0; i < (56*600-1); ++i) 		// 55 minutes, 59 seconds and 9 tenths more
    67198:  403:		TaskStopwatch();
        2:  404:	CU_ASSERT(is_equal_swtime(59, 59, 9));	// test minutes
        2:  405:	TaskStopwatch();
        2:  406:	CU_ASSERT(is_equal_swtime(0, 0, 0));	// test minutes wrap
        2:  407:}
        -:  408:
        2:  409:void test_swatch_start_stop(void)
        -:  410:{
        2:  411:	reset_swtime();
        2:  412:	SetEvent(SWATCHMODE_EV);
        2:  413:	TaskInterface();
        2:  414:	CU_ASSERT_EQUAL(mode, SWATCHMODE);
        -:  415:
        2:  416:	SetEvent(PLUS_EV);
        2:  417:	TaskInterface();
        2:  418:	CU_ASSERT(swatch_running);
        -:  419:
        2:  420:	SetEvent(PLUS_EV);
        2:  421:	TaskInterface();
        2:  422:	CU_ASSERT_FALSE(swatch_running);
        -:  423:
        2:  424:	TaskStopwatch();
        2:  425:	CU_ASSERT(is_equal_swtime(0, 0, 1));
        2:  426:	SetEvent(MINUS_EV);
        2:  427:	TaskInterface();
        2:  428:	CU_ASSERT(is_equal_swtime(0, 0, 0));
        2:  429:}
        -:  430:
        -:  431:/* ########################################################################
        -:  432: * SUITE 'TIMESET':
        -:  433: * Test increment and decrement in TimesetMode.
        -:  434: * ######################################################################## */
        -:  435:
        2:  436:int init_suite_timeset(void)
        -:  437:{
        2:  438:	SetEvent(TIMESETMODE_EV);
        2:  439:	TaskInterface();
        2:  440:	if (!tsmode == SETHOURS) {
        1:  441:		SetEvent(TIMESETMODE_EV);
        1:  442:		TaskInterface();
        -:  443:	}
        2:  444:	return 0;
        -:  445:}
        -:  446:
        2:  447:int clean_suite_timeset(void)
        -:  448:{
        2:  449:	return 0;
        -:  450:}
        -:  451:
        -:  452:/* Make sure that SetHours mode works as expected. */
        2:  453:void test_timeset_sethours(void)
        -:  454:{
        2:  455:	unsigned i = 0;
        -:  456:
        2:  457:	reset_time();
        2:  458:	CU_ASSERT_EQUAL(mode, TIMESETMODE);
        2:  459:	CU_ASSERT_EQUAL(tsmode, SETHOURS);
        -:  460:
        2:  461:	SetEvent(PLUS_EV);
        2:  462:	TaskInterface();
        2:  463:	CU_ASSERT_EQUAL(hours, 1); 		// test hours positive increment
        2:  464:	CU_ASSERT_EQUAL(minutes, 0);
        -:  465:
       46:  466:	for (i = 0; i < 22; ++i) {
       44:  467:		SetEvent(PLUS_EV);
       44:  468:		TaskInterface();
        -:  469:	}
        2:  470:	CU_ASSERT_EQUAL(hours, 23); 	// test hours multiple increments
        2:  471:	CU_ASSERT_EQUAL(minutes, 0);
        -:  472:
        2:  473:	SetEvent(PLUS_EV);
        2:  474:	TaskInterface();
        2:  475:	CU_ASSERT_EQUAL(hours, 0);		// test hours positive wrap
        2:  476:	CU_ASSERT_EQUAL(minutes, 0);
        -:  477:
        2:  478:	SetEvent(MINUS_EV);
        2:  479:	TaskInterface();
        2:  480:	CU_ASSERT_EQUAL(hours, 23);		// test hours negative wrap
        2:  481:	CU_ASSERT_EQUAL(minutes, 0);
        -:  482:
        2:  483:	SetEvent(MINUS_EV);
        2:  484:	TaskInterface();
        2:  485:	CU_ASSERT_EQUAL(hours, 22);		// test hours negative increment
        2:  486:	CU_ASSERT_EQUAL(minutes, 0);
        -:  487:
        2:  488:}
        -:  489:
        -:  490:
        -:  491:/* Make sure that SetMinutes mode works as expected. */
        2:  492:void test_timeset_setminutes(void)
        -:  493:{
        2:  494:	unsigned i = 0;
        -:  495:
        2:  496:	reset_time();
        2:  497:	SetEvent(TIMESETMODE_EV);
        2:  498:	TaskInterface();
        2:  499:	CU_ASSERT_EQUAL(mode, TIMESETMODE);
        2:  500:	CU_ASSERT_EQUAL(tsmode, SETMINUTES);
        -:  501:
        2:  502:	SetEvent(PLUS_EV);
        2:  503:	TaskInterface();
        2:  504:	CU_ASSERT_EQUAL(hours, 0); 		// test minutes positive increment
        2:  505:	CU_ASSERT_EQUAL(minutes, 1);
        -:  506:
      118:  507:	for (i = 0; i < 58; ++i) {
      116:  508:		SetEvent(PLUS_EV);
      116:  509:		TaskInterface();
        -:  510:	}
        2:  511:	CU_ASSERT_EQUAL(hours, 0); 	 	// test minutes multiple increments
        2:  512:	CU_ASSERT_EQUAL(minutes, 59);
        -:  513:
        2:  514:	SetEvent(PLUS_EV);
        2:  515:	TaskInterface();
        2:  516:	CU_ASSERT_EQUAL(hours, 0);		// test minutes positive wrap
        2:  517:	CU_ASSERT_EQUAL(minutes, 0);
        -:  518:
        2:  519:	SetEvent(MINUS_EV);
        2:  520:	TaskInterface();
        2:  521:	CU_ASSERT_EQUAL(hours, 0);		// test minutes negative wrap
        2:  522:	CU_ASSERT_EQUAL(minutes, 59);
        -:  523:
        2:  524:	SetEvent(MINUS_EV);
        2:  525:	TaskInterface();
        2:  526:	CU_ASSERT_EQUAL(hours, 0);		// test minutes negative increment
        2:  527:	CU_ASSERT_EQUAL(minutes, 58);
        2:  528:}
        -:  529:
        -:  530:
        -:  531:/* ########################################################################
        -:  532: * SUITE 'ALARMSET':
        -:  533: * Test increment and decrement in AlarmMode.
        -:  534: * ######################################################################## */
        -:  535:
        4:  536:void reset_alarm_time()
        -:  537:{
        4:  538:	a_hours = a_minutes = 0;
        4:  539:}
        -:  540:
        2:  541:int init_suite_alarmset(void)
        -:  542:{
        2:  543:	SetEvent(ALARMMODE_EV);
        2:  544:	TaskInterface();
        2:  545:	if (!asmode == ASETHOURS) {
        1:  546:		SetEvent(ALARMMODE_EV);
        1:  547:		TaskInterface();
        -:  548:	}
        2:  549:	return 0;
        -:  550:}
        -:  551:
        2:  552:int clean_suite_alarmset(void)
        -:  553:{
        2:  554:	return 0;
        -:  555:}
        -:  556:
        -:  557:/* Make sure that SetHours mode works as expected. */
        2:  558:void test_alarmset_sethours(void)
        -:  559:{
        2:  560:	unsigned i = 0;
        -:  561:
        2:  562:	reset_alarm_time();
        2:  563:	CU_ASSERT_EQUAL(mode, ALARMMODE);
        2:  564:	CU_ASSERT_EQUAL(asmode, ASETHOURS);
        -:  565:
        2:  566:	SetEvent(PLUS_EV);
        2:  567:	TaskInterface();
        2:  568:	CU_ASSERT_EQUAL(a_hours, 1); 		// test a_hours positive increment
        2:  569:	CU_ASSERT_EQUAL(a_minutes, 0);
        -:  570:
       46:  571:	for (i = 0; i < 22; ++i) {
       44:  572:		SetEvent(PLUS_EV);
       44:  573:		TaskInterface();
        -:  574:	}
        2:  575:	CU_ASSERT_EQUAL(a_hours, 23); 	// test a_hours multiple increments
        2:  576:	CU_ASSERT_EQUAL(a_minutes, 0);
        -:  577:
        2:  578:	SetEvent(PLUS_EV);
        2:  579:	TaskInterface();
        2:  580:	CU_ASSERT_EQUAL(a_hours, 0);		// test a_hours positive wrap
        2:  581:	CU_ASSERT_EQUAL(a_minutes, 0);
        -:  582:
        2:  583:	SetEvent(MINUS_EV);
        2:  584:	TaskInterface();
        2:  585:	CU_ASSERT_EQUAL(a_hours, 23);		// test a_hours negative wrap
        2:  586:	CU_ASSERT_EQUAL(a_minutes, 0);
        -:  587:
        2:  588:	SetEvent(MINUS_EV);
        2:  589:	TaskInterface();
        2:  590:	CU_ASSERT_EQUAL(a_hours, 22);		// test a_hours negative increment
        2:  591:	CU_ASSERT_EQUAL(a_minutes, 0);
        -:  592:
        2:  593:}
        -:  594:
        -:  595:
        -:  596:/* Make sure that SetMinutes mode works as expected. */
        2:  597:void test_alarmset_setminutes(void)
        -:  598:{
        2:  599:	unsigned i = 0;
        -:  600:
        2:  601:	reset_alarm_time();
        2:  602:	SetEvent(ALARMMODE_EV);
        2:  603:	TaskInterface();
        2:  604:	CU_ASSERT_EQUAL(mode, ALARMMODE);
        2:  605:	CU_ASSERT_EQUAL(asmode, ASETMINUTES);
        -:  606:
        2:  607:	SetEvent(PLUS_EV);
        2:  608:	TaskInterface();
        2:  609:	CU_ASSERT_EQUAL(a_hours, 0); 		// test a_minutes positive increment
        2:  610:	CU_ASSERT_EQUAL(a_minutes, 1);
        -:  611:
      118:  612:	for (i = 0; i < 58; ++i) {
      116:  613:		SetEvent(PLUS_EV);
      116:  614:		TaskInterface();
        -:  615:	}
        2:  616:	CU_ASSERT_EQUAL(a_hours, 0); 	 	// test a_minutes multiple increments
        2:  617:	CU_ASSERT_EQUAL(a_minutes, 59);
        -:  618:
        2:  619:	SetEvent(PLUS_EV);
        2:  620:	TaskInterface();
        2:  621:	CU_ASSERT_EQUAL(a_hours, 0);		// test a_minutes positive wrap
        2:  622:	CU_ASSERT_EQUAL(a_minutes, 0);
        -:  623:
        2:  624:	SetEvent(MINUS_EV);
        2:  625:	TaskInterface();
        2:  626:	CU_ASSERT_EQUAL(a_hours, 0);		// test a_minutes negative wrap
        2:  627:	CU_ASSERT_EQUAL(a_minutes, 59);
        -:  628:
        2:  629:	SetEvent(MINUS_EV);
        2:  630:	TaskInterface();
        2:  631:	CU_ASSERT_EQUAL(a_hours, 0);		// test a_minutes negative increment
        2:  632:	CU_ASSERT_EQUAL(a_minutes, 58);
        2:  633:}
        -:  634:
        -:  635:
        -:  636:/* ########################################################################
        -:  637: * SUITE 'BUZZER':
        -:  638: * Make sure buzzer activation works as expected (software-side).
        -:  639: * ######################################################################## */
        -:  640:
        2:  641:int init_suite_buzzer(void)
        -:  642:{
        2:  643:	buzzer_init();
        2:  644:	return 0;
        -:  645:}
        -:  646:
        2:  647:int clean_suite_buzzer(void)
        -:  648:{
        2:  649:	return 0;
        -:  650:}
        -:  651:
        -:  652:/* Make sure that mocked buzzer functions work. */
        2:  653:void test_buzzer_mocks(void)
        -:  654:{
        2:  655:	buzzer_mute();
        2:  656:	CU_ASSERT_FALSE(buzz_active);
        2:  657:	buzzer_unmute();
        2:  658:	CU_ASSERT_TRUE(buzz_active);
        2:  659:	buzzer_mute();
        2:  660:	CU_ASSERT_FALSE(buzz_active);
        2:  661:}
        -:  662:
        2:  663:void test_buzzer_beeps_number(void)
        -:  664:{
        2:  665:	unsigned beeps = 0;
        2:  666:	buzzer_mute();
        -:  667:
        2:  668:	SetRelAlarm(AlarmTaskAlarmBuzzer, 0, 0);
       16:  669:	while(*AlarmTaskAlarmBuzzer) {
       12:  670:		TaskAlarmBuzzer();
       12:  671:		if (buzz_active)
        6:  672:			++beeps;
        -:  673:	}
        -:  674:
        2:  675:	CU_ASSERT_EQUAL(beeps, N_BEEPS_ALARM);
        2:  676:}
        -:  677:
        -:  678:
        -:  679:/* Initialize CUnit registry and suites. */
        1:  680:CU_ErrorCode init_cunit(void)
        -:  681:{
        -:  682:	// Initialize test registry
        1:  683:	if (CUE_SUCCESS != CU_initialize_registry())
    #####:  684:	  return CU_get_error();
        -:  685:
        -:  686:	// Configure suite 'EVENTS'
        1:  687:	pSuite = CU_add_suite("Suite_events", init_suite_events, clean_suite_events);
        1:  688:	if (NULL == pSuite) {
    #####:  689:	  CU_cleanup_registry();
    #####:  690:	  return CU_get_error();
        -:  691:	}
        2:  692:	if ((NULL == CU_add_test(pSuite, "test_clear_events", test_clear_events)) ||
        2:  693:	   (NULL == CU_add_test(pSuite, "test_set_event", test_set_event)) ||
        1:  694:	   (NULL == CU_add_test(pSuite, "test_clear_event", test_clear_event)))
        -:  695:	{
    #####:  696:	  CU_cleanup_registry();
    #####:  697:	  return CU_get_error();
        -:  698:	}
        -:  699:
        -:  700:	// Configure suite 'MODES'
        1:  701:	pSuite = CU_add_suite("Suite_modes", init_suite_modes, clean_suite_modes);
        1:  702:	if (NULL == pSuite) {
    #####:  703:	  CU_cleanup_registry();
    #####:  704:	  return CU_get_error();
        -:  705:	}
        2:  706:	if ((NULL == CU_add_test(pSuite, "test_mode_transitions", test_mode_transitions)) ||
        2:  707:	   (NULL == CU_add_test(pSuite, "test_timeset_modes", test_timeset_modes)) ||
        1:  708:	   (NULL == CU_add_test(pSuite, "test_alarm_modes", test_alarm_modes)))
        -:  709:	{
    #####:  710:	  CU_cleanup_registry();
    #####:  711:	  return CU_get_error();
        -:  712:	}
        -:  713:
        -:  714:	// Configure suite 'CLOCK'
        1:  715:	pSuite = CU_add_suite("Suite_clock", init_suite_clock, clean_suite_clock);
        1:  716:	if (NULL == pSuite) {
    #####:  717:	  CU_cleanup_registry();
    #####:  718:	  return CU_get_error();
        -:  719:	}
        1:  720:	if ((NULL == CU_add_test(pSuite, "test_main_clock", test_main_clock)))
        -:  721:	{
    #####:  722:	  CU_cleanup_registry();
    #####:  723:	  return CU_get_error();
        -:  724:	}
        -:  725:
        -:  726:	// Configure suite 'STOPWATCH'
        1:  727:	pSuite = CU_add_suite("Suite_stopwatch", init_suite_swatch, clean_suite_swatch);
        1:  728:	if (NULL == pSuite) {
    #####:  729:	  CU_cleanup_registry();
    #####:  730:	  return CU_get_error();
        -:  731:	}
        2:  732:	if ((NULL == CU_add_test(pSuite, "test_swatch_clock", test_swatch_clock)) ||
        1:  733:		(NULL == CU_add_test(pSuite, "test_swatch_start_stop", test_swatch_start_stop)))
        -:  734:	{
    #####:  735:	  CU_cleanup_registry();
    #####:  736:	  return CU_get_error();
        -:  737:	}
        -:  738:
        -:  739:	// Configure suite 'TIMESET'
        1:  740:	pSuite = CU_add_suite("Suite_timeset", init_suite_timeset, clean_suite_timeset);
        1:  741:	if (NULL == pSuite) {
    #####:  742:	  CU_cleanup_registry();
    #####:  743:	  return CU_get_error();
        -:  744:	}
        2:  745:	if ((NULL == CU_add_test(pSuite, "test_timeset_sethours", test_timeset_sethours)) ||
        1:  746:		(NULL == CU_add_test(pSuite, "test_timeset_setminutes", test_timeset_setminutes)))
        -:  747:	{
    #####:  748:	  CU_cleanup_registry();
    #####:  749:	  return CU_get_error();
        -:  750:	}
        -:  751:
        -:  752:	// Configure suite 'ALARMSET'
        1:  753:	pSuite = CU_add_suite("Suite_alarmset", init_suite_alarmset, clean_suite_alarmset);
        1:  754:	if (NULL == pSuite) {
    #####:  755:	  CU_cleanup_registry();
    #####:  756:	  return CU_get_error();
        -:  757:	}
        2:  758:	if ((NULL == CU_add_test(pSuite, "test_alarmset_sethours", test_alarmset_sethours)) ||
        1:  759:		(NULL == CU_add_test(pSuite, "test_alarmset_setminutes", test_alarmset_setminutes)))
        -:  760:	{
    #####:  761:	  CU_cleanup_registry();
    #####:  762:	  return CU_get_error();
        -:  763:	}
        -:  764:
        -:  765:	// Configure suite 'BUZZER'
        1:  766:	pSuite = CU_add_suite("Suite_buzzer", init_suite_buzzer, clean_suite_buzzer);
        1:  767:	if (NULL == pSuite) {
    #####:  768:	  CU_cleanup_registry();
    #####:  769:	  return CU_get_error();
        -:  770:	}
        2:  771:	if ((NULL == CU_add_test(pSuite, "test_buzzer_mocks", test_buzzer_mocks)) ||
        1:  772:		(NULL == CU_add_test(pSuite, "test_buzzer_beeps_number", test_buzzer_beeps_number)))
        -:  773:	{
    #####:  774:	  CU_cleanup_registry();
    #####:  775:	  return CU_get_error();
        -:  776:	}
        -:  777:
        1:  778:	return 0;
        -:  779:}
        -:  780:
        -:  781:/* Cleanup CUnit registry */
        1:  782:CU_ErrorCode cleanup_cunit(void)
        -:  783:{
        -:  784:	// Clean up registry and return
        1:  785:	CU_cleanup_registry();
        1:  786:	return CU_get_error();
        -:  787:}
        -:  788:
        -:  789:
        1:  790:void run_cunit_tests(void)
        -:  791:{
        -:  792:	// Run all tests using console interface
        1:  793:	CU_console_run_tests();
        -:  794:	// CU_list_tests_to_file();
        1:  795:}
        -:  796:
        -:  797:
        1:  798:int main()
        -:  799:{
        1:  800:	init_cunit();
        -:  801:
        1:  802:	init_swatch();
        -:  803:
        1:  804:	run_cunit_tests();
        -:  805:
        1:  806:	return cleanup_cunit();
        -:  807:}
