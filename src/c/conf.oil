/* conf.oil */

CPU mySystem {
	OS myOs {
		EE_OPT = "DEBUG";
		CPU_DATA = CORTEX_MX {
			MODEL = M4;
			APP_SRC = "code.c";
			APP_SRC = "buzzer.c";
			APP_SRC = "debug.c";
			APP_SRC = "display.c";
			APP_SRC = "event.c";
			APP_SRC = "pictures.c";
			APP_SRC = "STMPE811QTR.c";
			APP_SRC = "touch.c";
			APP_SRC = "widget.c";
			APP_SRC = "widget_config.c";
			COMPILER_TYPE = GNU; 
			MULTI_STACK = FALSE;
		};
		
		EE_OPT = "__USE_SYSTICK__";
		MCU_DATA = STM32 {
			MODEL = STM32F4xx;
		};
		
		KERNEL_TYPE = BCC1;
		EE_OPT = "__OO_STARTOS_OLD__";

		STATUS = EXTENDED;
		STARTUPHOOK = FALSE;
		ERRORHOOK = FALSE;
		SHUTDOWNHOOK = FALSE;
		PRETASKHOOK = FALSE;
		POSTTASKHOOK = FALSE;
		USEGETSERVICEID = FALSE;
		USEPARAMETERACCESS = FALSE;
		USERESSCHEDULER = FALSE;
		
		EE_OPT = "__ADD_LIBS__";
		
		LIB = ENABLE { NAME = "ST_CMSIS"; };
		LIB = ENABLE { NAME = "STM32F4XX_SPD"; 
			STM32F4XX_SPD = ENABLE {
				USEGPIO = TRUE;
				USESPI = TRUE;
				USEEXTI = TRUE;
				USEMISC = TRUE;
				USEFLASH = TRUE;
				USEI2C = TRUE;
				USEDMA = TRUE;
				USEUSART = TRUE;
			};
		};
		LIB = ENABLE { NAME = "STM32F4_DISCOVERY";
			STM32F4_DISCOVERY = ENABLE {
				USECOM = TRUE;
				USELCD = TRUE;
			};
		};
	};
	
	/* ******************************************
	 * *************** COUNTER ******************
	 * *****************************************/
	
	
	COUNTER my_counter {
		MINCYCLE = 2;
		MAXALLOWEDVALUE = 0xFFFF ;
		TICKSPERBASE = 1;
	};


	/* ******************************************
	 * *************** ALARMS *******************
	 * *****************************************/
	 
	ALARM AlarmTaskClock {
		COUNTER = my_counter;
		ACTION = ACTIVATETASK { TASK = TaskClock; };
	};
	
	ALARM AlarmTaskStopwatch {
		COUNTER = my_counter;
		ACTION = ACTIVATETASK { TASK = TaskStopwatch; };
	};
	
	ALARM AlarmTaskAlarmBuzzer {
		COUNTER = my_counter;
		ACTION = ACTIVATETASK { TASK = TaskAlarmBuzzer; };
	};
	
	ALARM AlarmTaskInterface {
		COUNTER = my_counter;
		ACTION = ACTIVATETASK { TASK = TaskInterface; };
	};
	
	ALARM AlarmTaskTouch {
		COUNTER = my_counter;
		ACTION = ACTIVATETASK { TASK = TaskTouch; };
	};
	
 
	/* ******************************************
	 * *************** TASKS ********************
	 * *****************************************/

	/* Update the current time */
	TASK TaskClock {
		PRIORITY = 0x02;   // high
		AUTOSTART = FALSE;
		STACK = SHARED;
		ACTIVATION = 1;
		SCHEDULE = FULL;
	};
	
	/* Update the stopwatch time */
	TASK TaskStopwatch {
		PRIORITY = 0x02;   // high
		AUTOSTART = FALSE;
		STACK = SHARED;
		ACTIVATION = 1;
		SCHEDULE = FULL;
	};
	
	/* Manage the alarm buzzer */
	TASK TaskAlarmBuzzer {
		PRIORITY = 0x01;   // low
		AUTOSTART = FALSE;
		STACK = SHARED;
		ACTIVATION = 1;
		SCHEDULE = FULL;
	};
	
	/* React to events */
	TASK TaskInterface {
		PRIORITY = 0x01;   // low
		AUTOSTART = FALSE;
		STACK = SHARED;
		ACTIVATION = 1;
		SCHEDULE = FULL;
	};
	
	/* Read user inputs from the touchscreen */
	TASK TaskTouch {
		PRIORITY = 0x01;   // low
		AUTOSTART = FALSE;
		STACK = SHARED;
		ACTIVATION = 1;
		SCHEDULE = FULL;
	};


	/* ******************************************
	 * ************ ISR HANDLER *****************
	 * *****************************************/

	ISR systick_handler {
		CATEGORY = 2;
		ENTRY = "SYSTICK";
		PRIORITY = 1;
	};
};
